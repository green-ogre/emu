use crate::primitives::*;

#[derive(Debug)]
pub enum Instr {
    Addi(Reg, Reg, Imm),
    Lui(Reg, Imm),
    Auipc(Reg, Imm),
    Slti(Reg, Reg, Imm),
    Sltiu(Reg, Reg, Imm),
    Xori(Reg, Reg, Imm),
    Ori(Reg, Reg, Imm),
    Andi(Reg, Reg, Imm),
    Slli(Reg, Reg, Imm),
    Srli(Reg, Reg, Imm),
    Srai(Reg, Reg, Imm),
    Add(Reg, Reg, Reg),
    Sub(Reg, Reg, Reg),
    Sll(Reg, Reg, Reg),
    Slt(Reg, Reg, Reg),
    Sltu(Reg, Reg, Reg),
    Xor(Reg, Reg, Reg),
    Srl(Reg, Reg, Reg),
    Sra(Reg, Reg, Reg),
    Or(Reg, Reg, Reg),
    And(Reg, Reg, Reg),
    Lb(Reg, Offset),
    Lh(Reg, Offset),
    Ld(Reg, Offset),
    Lbu(Reg, Offset),
    Lhu(Reg, Offset),
    Sb(Reg, Offset),
    Sh(Reg, Offset),
    Sd(Reg, Offset),
    Jal(Reg, Imm),
    Jalr(Reg, Reg, Imm),
    Beq(Reg, Reg, Imm),
    Bne(Reg, Reg, Imm),
    Blt(Reg, Reg, Imm),
    Bge(Reg, Reg, Imm),
    Bltu(Reg, Reg, Imm),
    Bgeu(Reg, Reg, Imm),
    Ecall,

    Lw(Reg, Offset),
    Lwu(Reg, Offset),
    Sw(Reg, Offset),
    Addiw(Reg, Reg, Imm),
    Subw(Reg, Reg, Reg),
    Srlw(Reg, Reg, Reg),
    Sraw(Reg, Reg, Reg),
    Sltw(Reg, Reg, Reg),
    Sllw(Reg, Reg, Reg),
    Slliw(Reg, Reg, Imm),
    Srliw(Reg, Reg, Imm),
    Sraiw(Reg, Reg, Imm),
    Addw(Reg, Reg, Reg),

    Mul(Reg, Reg, Reg),
    Div(Reg, Reg, Reg),
    Rem(Reg, Reg, Reg),

    Mulw(Reg, Reg, Reg),
    Divw(Reg, Reg, Reg),
    Remw(Reg, Reg, Reg),
}
